!(function (Chunks) {
  (s = {}),
    (s.o = function (Chunks, e) {
      return Object.prototype.hasOwnProperty.call(Chunks, e);
    }),
    (s.p = "");
  var jsonpArray = (window.webpackJsonp = window.webpackJsonp || []);
  var oldJsonpFunction /* o */ = jsonpArray.push.bind(jsonpArray);

  jsonpArray.push = e;
  jsonpArray = jsonpArray.slice();

  for (var B = 0; B < jsonpArray.length; B++) {
    e(jsonpArray[B]); // webpackJsonpCallback
  }
  var n = oldJsonpFunction;
  jsonpArray.push([18, 1]), i();
})(
  /* Chunks begin here */
  [
    // module, module.exports, require()
    function (A, e, i) {
      // class with test() method and constructor
      "use strict";
      var t =
        (this && this.__importDefault) ||
        function (A) {
          return A && A.__esModule
            ? A
            : {
                default: A,
              };
        };
      Object.defineProperty(e, "__esModule", {
        value: !0,
      });
      const a = 1;
      e.default = class {
        constructor() {
          this.a = 1;
        }
        test() {
          console.log(this.a);
        }
      };
    },
    function (A, e, i) {
      // Const class
      "use strict";
      Object.defineProperty(e, "__esModule", {
        value: !0,
      });
      e.default = {
        CONST_A: 1,
        CONST_B: 42,
      };
    },
    function (A, e, i) {
      // useless ?
      "use strict";
      Object.defineProperty(e, "__esModule", {
        value: !0,
      });
      e.default = class {};
    },
    function (A, e, i) {
      // raw file
      A.exports = i.p + "HASH_FILE.bin";
    },
    function (A, e, i) {
      "use strict";
      var t =
        (this && this.__importDefault) ||
        function (A) {
          return A && A.__esModule
            ? A
            : {
                default: A,
              };
        };
      Object.defineProperty(e, "__esModule", {
        value: !0,
      });
      const a = i(1), // import 'Phaser'
        r = t(i(4)),
        dontRenameInlineWeird = g(5),
        dontRenameInline = 5;
      const dontRename = 4;
      e.default = class extends a.Scene {
        constructor() {
          super("gameScene"), (this.isPause = !1);
        }
        preload() {
          this.load.scenePlugin();
        }
        create() {
          this.map = this.make.tilemap({
            key: "map3",
            tileWidth: 16,
            tileHeight: 16,
          });
        }
        setPause() {
          this.isPause && a.pauseAll();
          console.log(r.CONST_A);

          // Collide with the a var
          Array.from(4).forEach((a, r) => {
            a += 1;
          });
          console.log(a + r);
        }
      };
    },
  ]
);
